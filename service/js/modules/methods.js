/*
* VB.methods. Public plugin methods
* */
voiceBase = (function(VB, $) {
    "use strict";

    VB.methods = {
        init: function(options) {
            VB.reSettings(options);
            VB.init(VB.settings.playerId);
            VB.view.init(this);
        },
        ready: function () {
            VB.settings.ready.apply(this);
        },
        favorite: function(opt) {
            if (opt)
                VB.helper.find(".vbs-star-btn").addClass('vbs-active').attr('data-tile', 'Remove from Favorites');
            else
                VB.helper.find(".vbs-star-btn").removeClass('vbs-active').attr('data-tile', 'Add from Favorites');
            return opt;
        },
        favoriteToggle: function() {
            var $star = VB.helper.find(".vbs-star-btn");
            $star.toggleClass('vbs-active');
            return $star.hasClass('vbs-active');
        },
        isFavorite: function() {
            return VB.helper.find(".vbs-star-btn").hasClass('vbs-active');
        },
        getPosition: function() {
            return Math.round(VB.PlayerApi.getPosition());
        },
        getSearchString: function() {
            return VB.helper.find('#vbs-voice_search_txt').val();
        },
        getSharePositionUrl: function() {
            var newparam = {};
            newparam['vbt'] = Math.round(VB.PlayerApi.getPosition());
            return VB.helper.getNewUrl(newparam);
        },
        getShareSearchStringUrl: function() {
            var newparam = {};
            newparam['vbs'] = encodeURI(VB.helper.find('#vbs-voice_search_txt').val());
            return VB.helper.getNewUrl(newparam);
        },
        getShareFlag: function() {
            return VB.helper.find('.vbs-share-radio-row input[name="share-opt"]:checked').val();
        },
        search: function(text) {
            VB.helper.find("#vbs-voice_search_txt").val(text);
            VB.helper.find('#vbs-search-form').submit();
            return text;
        },
        position: function(time) {
            VB.PlayerApi.seek(time);
            return time;
        },
        destroy: function(){
            VB.helper.clearIntervals();
            VB.PlayerApi.destroy();
            $(this).remove();
            $('.vbs-content').remove();
        },

        addCustomMarkers: function (markers) {
            VB.data.customMarkers = markers;
        },

        showCustomMarkers: function () {
            VB.view.showCustomMarkers();
        },

        hideCustomMarkers: function () {
            VB.view.hideCustomMarkers();
        },

        nextCustomMarkers: function () {
            var $markersContainer = VB.helper.find('.vbs-custom-markers');
            VB.helper.moveToNextMarker($markersContainer);
        },

        prevCustomMarkers: function () {
            var $markersContainer = VB.helper.find('.vbs-custom-markers');
            VB.helper.moveToPrevMarker($markersContainer);
        },

        /*
        * add highlighting to transcript snippets
        *
        * @param {Array of Objects} snippets - array of text snippets
        *   contain: startTime {Number} - start time in seconds
        *            endTime {Number} - end time in seconds
        *            color {String} - hex or rgb color
        * */
        addHighlightTranscript: function (snippets) {
            VB.data.highlightSnippets = snippets;
        },

        showHighlightTranscript: function () {
            VB.helper.manageHighlightSnippets(true);
        },

        hideHighlightTranscript: function () {
            VB.helper.manageHighlightSnippets(false);
        },

        hasSpottedKeywordsInGroups: function () {
            return VB.helper.hasSpottedKeywordsInGroups();
        },

        showAutoGeneratedKeywords: function () {
            VB.helper.showAutoGeneratedKeywords();
        },

        hideAutoGeneratedKeywords: function () {
            VB.helper.hideAutoGeneratedKeywords();
        }
    };

    return VB;
})(voiceBase, jQuery);